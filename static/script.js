// Variables globales para almacenar el canal de datos y la conexi√≥n peer
var peerConnection = null;
var remoteDataChannel = null;


// Funci√≥n de log para pintar en consola los mensajes bonitos ‚ú®
function log(message, object) {
    const logElement = document.getElementById("log");
    const timestamp = new Date().toLocaleTimeString();

    let objectHtml = '';
    if (object) {
        if (typeof object === 'string') {
            objectHtml = `<span class="log-string">"${object}"</span>`;
        } else if (typeof object === 'object') {
            objectHtml = `<pre class="log-object">${JSON.stringify(object, null, 2)}</pre>`;
        } else {
            objectHtml = `<span class="log-value">${object}</span>`;
        }
    }

    logElement.innerHTML += `
        <div class="log-entry">
            <span class="log-timestamp">${timestamp}</span>
            <span class="log-message">${message}</span>
            ${objectHtml}
        </div>
    `;

    // Auto-scroll al final
    logElement.scrollTop = logElement.scrollHeight;

    console.log(message, object);
}


// Funci√≥n para enviar mensajes a trav√©s del canal de datos
function sendMessage(message) {
    const channel = dataChannel || remoteDataChannel;
    const sendButton = document.getElementById("send");

    if (channel && channel.readyState === 'open' && !sendButton.disabled) {
        channel.send(message);
        log("üì§ Mensaje enviado:", message);
    } else {
        log("‚ö†Ô∏è El canal de datos no est√° abierto o el bot√≥n est√° deshabilitado");
    }
}

// Mandar el mensaje que se escribe en el input con id "message" cuando se pulsa el bot√≥n con id "send"
document.getElementById("send").addEventListener("click", () => {
    const messageInput = document.getElementById("message");
    const message = messageInput.value;
    messageInput.value = ""; // Limpiar el input despu√©s de enviar el mensaje
    sendMessage(message);
});

// Mandar el mensaje que se escribe en el input con id "message" cuando se pulsa la tecla Enter
document.getElementById("message").addEventListener("keypress", (event) => {
    if (event.key === "Enter") {
        const messageInput = document.getElementById("message");
        const message = messageInput.value;
        sendMessage(message);
        messageInput.value = ""; // Limpiar el input despu√©s de enviar el mensaje
    }
});

async function createPeerConnection() {
    //1. Crear la conexi√≥n RTCPeerConnection y el canal de datos
    log("üöÄ Iniciando conexi√≥n WebRTC");

    peerConnection = new RTCPeerConnection({
        iceServers: [
            { urls: "stun:stun.l.google.com:19302" } // Esto nos permite usar un servidor STUN p√∫blico de Google. 
            // El servidor STUN ayuda a los navegadores a descubrir su direcci√≥n IP p√∫blica y el puerto que deben usar para comunicarse entre s√≠.
        ]
    });

    log("üîó Conexi√≥n RTCPeerConnection creada");

    // Crear el canal de datos para enviar mensajes
    log("üì° Creando canal de datos para enviar mensajes");
    dataChannel = peerConnection.createDataChannel("chat");

    // Se configura el evento onopen del canal de datos
    dataChannel.onopen = () => {
        log("üü¢ Canal de datos abierto");
        // Habilitar el bot√≥n de env√≠o cuando el canal est√© abierto
        document.getElementById("send").disabled = false;
    };

    // Se configurar el evento onmessage del canal de datos
    dataChannel.onmessage = (event) => {
        const message = event.data;
        // Distinguir entre diferentes tipos de mensajes del servidor
        if (message.includes("ü§ñ Mensaje autom√°tico")) {
            log("üïê Mensaje autom√°tico del servidor:", message);
        } else if (message.includes("ÔøΩ Echo desde servidor")) {
            log("üîÑ Echo del servidor:", message);
        } else if (message.includes("üéâ")) {
            log("üëã Mensaje de bienvenida:", message);
        } else {
            log("üì• Mensaje recibido:", message);
        }
    };

    // Configurar el evento onclose del canal de datos
    dataChannel.onclose = () => {
        log("üî¥ Canal de datos cerrado");
        // Deshabilitar el bot√≥n de env√≠o cuando el canal se cierre
        document.getElementById("send").disabled = true;
    };

    // Configurar el evento oniceconnectionstatechange para manejar los cambios en el estado de conexi√≥n ICE
    peerConnection.oniceconnectionstatechange = (event) => {
        log("üßä Estado ICE:", peerConnection.iceConnectionState);

    };

    // Configurar el evento ondatachannel para recibir mensajes del otro extremo
    remoteDataChannel = null;
    peerConnection.ondatachannel = (event) => {

        log("üì° Canal de datos recibido del otro extremo");
        remoteDataChannel = event.channel;

        remoteDataChannel.onmessage = (event) => {
            const message = event.data;
            // Distinguir entre diferentes tipos de mensajes del servidor
            if (message.includes("ü§ñ Mensaje autom√°tico")) {
                log("ÔøΩ Mensaje autom√°tico del servidor:", message);
            } else if (message.includes("üì¢ Echo desde servidor")) {
                log("üîÑ Echo del servidor:", message);
            } else if (message.includes("üéâ")) {
                log("üëã Mensaje de bienvenida:", message);
            } else {
                log("üí¨ Mensaje recibido del servidor:", message);
            }
        };
    };
}

// Negociar la conexi√≥n WebRTC con el servidor
async function negotiate() {


    try {
        log("ü§ù Se crear√° una oferta para iniciar la conexi√≥n WebRTC");
        const offer = await peerConnection.createOffer();
        log("üìù Oferta creada:", offer);
        await peerConnection.setLocalDescription(offer);

        // Promesa que espera a que los ICE candidates sean recolectados
        // Esto es importante para asegurarse de que todos los candidatos ICE se hayan recolectado antes de enviar la oferta al servidor.
        // Los ICE candidates son necesarios para establecer la conexi√≥n entre los pares.
        // Pueden ser locales o remotos, y se utilizan para encontrar la mejor ruta de comunicaci√≥n entre los pares.
        log("‚è≥ Esperando a que se recolecten todos los ICE candidates...");
        await new Promise((resolve) => {
            peerConnection.onicecandidate = (event) => {
                if (event.candidate === null) {
                    log("‚úÖ Todos los ICE candidates han sido recolectados");
                    resolve();
                } else {
                    log(`ü•á Nuevo ICE candidate de tipo: ${event.candidate.type}`, event.candidate);
                }
            };
        });

        //Enviar la oferta al servidor para hacer la conexi√≥n
        const response = await fetch("/offer", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ sdp: peerConnection.localDescription.sdp, type: peerConnection.localDescription.type })
        });

        log("‚è≥ Oferta enviada al servidor, esperando respuesta...");
        const answer = await response.json();
        log("üì¨ Respuesta recibida del servidor:", answer);
        log("üìú Configurando la descripci√≥n remota con la respuesta del servidor");
        // Esto lo qu hace es configurar la descripci√≥n remota de la conexi√≥n peer con la respuesta del servidor.
        // El objetivo es establecer la conexi√≥n WebRTC entre los pares. Esta indica c√≥mo nos comunicaremos con el otro extremo.
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));

        log("üéâ Conexi√≥n WebRTC negociada con √©xito");


    } catch (error) {
        log("‚ùå Error al negociar la conexi√≥n WebRTC:", error);
    }
}

// Esta funci√≥n se ejecuta cuando se hace clic en el bot√≥n "Iniciar conexi√≥n"
async function start() {
    await createPeerConnection();
    await negotiate();
}